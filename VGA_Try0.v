
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module VGA_Try0(

	//////////// CLOCK //////////
	input 		          		CLOCK_50,
	input 		          		CLOCK2_50,
	input 		          		CLOCK3_50,
	input 		          		CLOCK4_50,

	//////////// SEG7 //////////
	output		     [6:0]		HEX0,
	output		     [6:0]		HEX1,
	output		     [6:0]		HEX2,
	output		     [6:0]		HEX3,
	output		     [6:0]		HEX4,
	output		     [6:0]		HEX5,

	//////////// KEY //////////
	input 		     [3:0]		KEY, 

	//////////// LED //////////
	output		     [9:0]		LEDR,

	//////////// SW //////////
	input 		     [9:0]		SW,

	//////////// VGA //////////
	output		     [7:0]		VGA_B,
	output		          		VGA_BLANK_N,
	output		          		VGA_CLK,
	output		     [7:0]		VGA_G,
	output		          		VGA_HS,
	output		     [7:0]		VGA_R,
	output		          		VGA_SYNC_N,
	output		          		VGA_VS,
	

	//////////// GPIO_1, GPIO_1 connect to GPIO Default //////////
	inout 		    [35:0]		GPIO1GPIO
	);



//=======================================================
//  REG/wIRE declarations
//=======================================================

wire disp_en;
wire [31:0] x;
wire [31:0] y;
wire reset;

wire vEnable;
wire hEnable;

wire [7:0] r1,g1,b1;
wire [7:0] r2,g2,b2;
wire [7:0] r3,g3,b3;
wire [7:0] r4,g4,b4;
wire [7:0] r,g,b;

parameter H = 1280;
parameter V = 1024;
//colori
parameter full = 8'hff;
parameter empty = 8'b0;

reg [7:0] colore;

//Per il 7 segmenti

/*
always@(posedge VGA_VS or negedge reset)
begin
if(!reset)
begin
r <= empty;
g <= empty;
b <= empty;
end
else
begin
	colore <= SW[9:2];
	if(!KEY[3])
		r <= colore ;
	if(!KEY[2])
		g <= colore ;
	if(!KEY[1])
		b <= colore ;
end
end
*/

//=======================================================
//  Structural coding
//=======================================================
assign GPIO1GPIO[5:0]={VGA_CLK,disp_en,VGA_HS,VGA_VS,vEnable,hEnable};//debug infos

assign reset = KEY[0];
assign VGA_BLANK_N = 1'b1;

assign LEDR[1] = VGA_BLANK_N ;
//mux prinipali per spegnere i dac quando la riga non deve essere visualizzata
assign VGA_R = (disp_en)?r:empty;
assign VGA_G = (disp_en)?g:empty;
assign VGA_B = (disp_en)?b:empty;

PLL pll(	//modulo creato con una megafunzione(vedi ipcatalog dal menu view->Utility Windows)
.refclk (CLOCK_50),//clock di partenza, deve essere 50 MHz per come abbiamo impostato le cose
.rst (~reset),
.outclk_0 (VGA_CLK),//uscita del clock a 108MHz
.locked (LEDR[9])// se il led e` acceso il PLL funziona
	);


timing tm(//spiegazioni in timing.v
.clk (VGA_CLK)		,
.rst_n	(reset)	,
//direttamente alla porta
.hsync	(VGA_HS),
.vsync	(VGA_VS),
//al ADV7123
//.blank_n	(VGA_BLANK_N),
.sync_n	(VGA_SYNC_N),
//al mux per i pixels
//.disp_enable  (disp_en),//&& interno non funziona e quindi lo facciamo fuori
.Xpix (x),
.Ypix (y),
.vEnable (vEnable),
.hEnable (hEnable)
);

assign disp_en = vEnable && hEnable ;

colori#(H,V)  uno(
 VGA_CLK,
 disp_en,
//coordinate
x,
y,
//colori
r1,
g1,
b1
);
	
attorno#(H,V)  cornice(
 VGA_CLK,
 disp_en,
//coordinate
x,
y,
//colori
r2,
g2,
b2
);
//tmp
	assign r = (SW[8])?r1:r4;
	assign g = (SW[8])?g1:g4;
	assign b = (SW[8])?b1:b4;

	movimenti#(H,V) muv(
 VGA_CLK,
 VGA_VS,
 disp_en,
KEY,
SW,
//coordinate
x,
y,
//colori
r4,
g4,
b4,
	HEX0,
	HEX1,
	HEX2,
	HEX3,
	HEX4,
	HEX5
);

/*
 //QUADRATI
always@(posedge VGA_CLK or negedge reset)begin
	if(!reset)begin
		r <= empty;
		b <= empty;
		g <= empty;
	end else if(disp_en) begin
	
		if (x < (H/2-4) && y < (V/2-4))begin
			r <= full;
			b <= empty;
			g <= empty;
		end
		else if (x > (H/2+4) && y < (V/2-4))begin
			r <= empty;
			b <= full;
			g <= empty;
		end
		else if (x<(H/2-4) && y>(V/2+4))begin
			r <= empty;
			b <= empty;
			g <= full;
		end
		else if (x>(H/2+4) && y>(V/2+4))begin
			r <= full;
			b <= empty;
			g <= full;
		end
		else begin
			r <= full;
			b <= full;
			g <= full;
		end
	end
end
*/

endmodule
