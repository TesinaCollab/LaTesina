
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module VGA_Try0(

	//////////// CLOCK //////////
	input 		          		CLOCK_50,
	input 		          		CLOCK2_50,
	input 		          		CLOCK3_50,
	input 		          		CLOCK4_50,

	//////////// SEG7 //////////
	output		     [6:0]		HEX0,
	output		     [6:0]		HEX1,
	output		     [6:0]		HEX2,
	output		     [6:0]		HEX3,
	output		     [6:0]		HEX4,
	output		     [6:0]		HEX5,

	//////////// KEY //////////
	input 		     [3:0]		KEY,

	//////////// LED //////////
	output		     [9:0]		LEDR,

	//////////// SW //////////
	input 		     [9:0]		SW,

	//////////// VGA //////////
	output		     [7:0]		VGA_B,
	output		          		VGA_BLANK_N,
	output		          		VGA_CLK,
	output		     [7:0]		VGA_G,
	output		          		VGA_HS,
	output		     [7:0]		VGA_R,
	output		          		VGA_SYNC_N,
	output		          		VGA_VS,
	

	//////////// GPIO_1, GPIO_1 connect to GPIO Default //////////
	inout 		    [35:0]		GPIO1GPIO
	);



//=======================================================
//  REG/wIRE declarations
//=======================================================

wire disp_en;
wire [31:0] x;
wire [31:0] y;
wire reset;

wire vEnable;
wire hEnable;

reg [7:0] r,g,b;

parameter H = 1280;
parameter V = 1024;
parameter full = 8'hff;
parameter empty = 8'b0;

timing tm(
.clk (VGA_CLK)		,
.rst_n	(reset)	,
//direttamente alla porta
.hsync	(VGA_HS),
.vsync	(VGA_VS),
//al ADV7123
//.blank_n	(VGA_BLANK_N),
.sync_n	(VGA_SYNC_N),
//al mux per i pixels
//.disp_enable  (disp_en),
.Xpix (x),
.Ypix (y),
.vEnable (vEnable),
.hEnable (hEnable)
);

assign disp_en = vEnable && hEnable ;
reg [7:0] colore;
/*
//Per il 7 segmenti
wire [3:0] d2,d1,d0;
wire [6:0] unused;
wire [7:0] muxcolor;

assign muxcolor = ((SW[1:0] == 2'b00)?colore:((SW[1:0] == 2'b01)?r:((SW[1:0] == 2'b10)?g:b)));

BIN20to6BCD segmenti(
.binary ({12'd0,muxcolor}),
.D2 (d2),
.D1 (d1),
.D0 (d0)
);

bcdtoHex zero(
.inBCD (4'd0),
.outHEX (unused)
);

bcdtoHex cifra1(
.inBCD (d1),
.outHEX (HEX1)
);

bcdtoHex cifra2(
.inBCD (d2),
.outHEX (HEX2)
);


bcdtoHex cifra3(
.inBCD (d0),
.outHEX (HEX0)
);

assign HEX5 = unused;
assign HEX4 = unused;
assign HEX3 = unused;
*/

/*
always@(posedge VGA_VS or negedge reset)
begin
if(!reset)
begin
r <= empty;
g <= empty;
b <= empty;
end
else
begin
	colore <= SW[9:2];
	if(!KEY[3])
		r <= colore ;
	if(!KEY[2])
		g <= colore ;
	if(!KEY[1])
		b <= colore ;
end
end
*/

//=======================================================
//  Structural coding
//=======================================================
assign reset = KEY[0];
//assign VGA_CLK = CLOCK4_50;
assign VGA_BLANK_N = 1'b1;

assign LEDR[1] = VGA_BLANK_N ;
assign VGA_R = (disp_en)?r:empty;
assign VGA_G = (disp_en)?g:empty;
assign VGA_B = (disp_en)?b:empty;

assign GPIO1GPIO[5:0]={VGA_CLK,disp_en,VGA_HS,VGA_VS,vEnable,hEnable};


PLL_0002 pll(	

.refclk (CLOCK_50),

	// interface 'reset'
.rst (~reset),

	// interface 'outclk0'
.outclk_0 (VGA_CLK),

	// interface 'locked'
.locked (LEDR[9])
	);

initial
begin
r <= empty;
b <= empty;
g <= empty;
end


/*
//CORNICE
always@(posedge VGA_CLK)
begin
 if(disp_en) begin
		if (x < 21)begin
			r <= full;
			b <= full;
			g <= full;
		end
		else if (y < 21)begin
			r <= empty;
			b <= full;
			g <= full;
		end
		else if (x > H-21)begin
			r <= full;
			b <= full;
			g <= empty;
		end
		else if (y > V-21)begin
			r <= full;
			b <= empty;
			g <= full;
		end
		else begin
			r <= empty;
			b <= (full - y[10:2]);
			g <= empty;
		end
	end
	else begin
r <= empty;
b <= empty;
g <= empty;
end
end
*/

/*/SCHERMO
always@(posedge VGA_CLK)
begin
 if(disp_en) 
 begin
	if (x < H)
	r <= full;
else
r <= empty;
end
end
*/

 //QUADRATI
always@(posedge VGA_CLK or negedge reset)begin
	if(!reset)begin
		r <= empty;
		b <= empty;
		g <= empty;
	end else if(disp_en) begin
	/*
			if (x<(H/2)&&y<(V/2))begin
			r <= 1;
			b <= 0;
			g <= 0;
		end
		else if (x>(H/2)&&y<(V/2))begin
			r <= 0;
			b <= 1;
			g <= 0;
		end
		else if (x<(H/2)&&y>(V/2))begin
			r <= 0;
			b <= 0;
			g <= 1;
		end
		else if (x>(H/2)&&y>(V/2))begin
			r <= 0;
			b <= 0;
			g <= 0;
		end
		*/
		if (x < (H/2-4) && y < (V/2-4))begin
			r <= full;
			b <= empty;
			g <= empty;
		end
		else if (x > (H/2+4) && y < (V/2-4))begin
			r <= empty;
			b <= full;
			g <= empty;
		end
		else if (x<(H/2-4) && y>(V/2+4))begin
			r <= empty;
			b <= empty;
			g <= full;
		end
		else if (x>(H/2+4) && y>(V/2+4))begin
			r <= full;
			b <= empty;
			g <= full;
		end
		else begin
			r <= full;
			b <= full;
			g <= full;
		end
	end
end

endmodule
