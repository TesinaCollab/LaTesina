
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module VGA_Try0(

	//////////// CLOCK //////////
	input 		          		CLOCK_50,
	input 		          		CLOCK2_50,
	input 		          		CLOCK3_50,
	input 		          		CLOCK4_50,

	//////////// SEG7 //////////
	output		     [6:0]		HEX0,
	output		     [6:0]		HEX1,
	output		     [6:0]		HEX2,
	output		     [6:0]		HEX3,
	output		     [6:0]		HEX4,
	output		     [6:0]		HEX5,

	//////////// KEY //////////
	input 		     [3:0]		KEY,

	//////////// LED //////////
	output		     [9:0]		LEDR,

	//////////// SW //////////
	input 		     [9:0]		SW,

	//////////// VGA //////////
	output		     [7:0]		VGA_B,
	output		          		VGA_BLANK_N,
	output		          		VGA_CLK,
	output		     [7:0]		VGA_G,
	output		          		VGA_HS,
	output		     [7:0]		VGA_R,
	output		          		VGA_SYNC_N,
	output		          		VGA_VS,

	//////////// GPIO_1, GPIO_1 connect to GPIO Default //////////
	inout 		    [35:0]		GPIO1GPIO
	);



//=======================================================
//  REG/wIRE declarations
//=======================================================

wire disp_en;
wire X;
wire Y;
wire reset;

reg [7:0] r,g,b;

parameter H = 1280;
parameter V = 1024;
parameter full = 8'hff;
parameter empty = 8'b0;

timing tm(
.clk (CLOCK4_50)		,
.rst_n	(reset)	,
//direttamente alla porta
.hsync	(VGA_HS),
.vsync	(VGA_VS),
//al ADV7123
.blank_n	(VGA_BLANK_N),
.sync_n	(VGA_SYNC_N),
//al mux per i pixels
.disp_enable  (disp_en),
.Xpix (X),
.Ypix (Y)
);


//=======================================================
//  Structural coding
//=======================================================
assign reset = KEY[0];
assign VGA_CLK = CLOCK4_50;

assign VGA_R = r && disp_en;
assign VGA_G = g && disp_en;
assign VGA_B = b && disp_en;

assign GPIO1GPIO[:]={CLOCK_50,CLOCK4_50,}

initial
begin
r <= empty;
b <= empty;
g <= empty;
end

always@(posedge VGA_CLK)
begin
 if(disp_en) begin
		if (X < 21)begin
			r <= full;
			b <= full;
			g <= full;
		end
		else if (Y < 21)begin
			r <= empty;
			b <= full;
			g <= full;
		end
		else if (X > H-21)begin
			r <= full;
			b <= full;
			g <= empty;
		end
		else if (Y > V-21)begin
			r <= full;
			b <= empty;
			g <= full;
		end
		else begin
			r <= empty;
			b <= full;
			g <= empty;
		end
	end
end


endmodule
